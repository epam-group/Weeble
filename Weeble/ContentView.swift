//
//  ContentView.swift
//  Weeble
//
//  Created by Максим on 26.12.2020.
//

import SwiftUI

struct ContentView: View {
    @State private var newWord = ""
    @State private var rootWord = ""
    @State private var listOfWords = [String]()
    
    @State private var errorTitle = ""
    @State private var errorMessage = ""
    @State private var showingError = false
    
    @State private var gameScore = 0
    
    var body: some View {
        HStack{
        //button will reroll new word and clean list of words
        //generated by previous try
        Button(action: {
            startScramble()
            listOfWords = []
            gameScore/=2
        }){
            Text("new game")
        }.padding(5)
            Spacer()
        }
        NavigationView{
            VStack{
                //onCommit means that every time, when we will press
                //return on our keyboard
                //we will run function letNewWord
                TextField("What is your word?", text: $newWord, onCommit: letNewWord)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                    .padding()
                    .autocapitalization(/*@START_MENU_TOKEN@*/.none/*@END_MENU_TOKEN@*/)
                
                List(listOfWords, id: \.self){
                    Image(systemName: "\($0.count).circle")
                    Text($0)
                }
                Text("Current score: \(gameScore)")
                    .font(.largeTitle).padding(5)
                Text("Your score will be divided by 2 each time the buttom new game is pressed").font(.caption).multilineTextAlignment(.center).foregroundColor(.gray)
            }
            .navigationTitle(rootWord)
            .onAppear(perform: startScramble)
            .alert(isPresented: $showingError) {
                Alert(title: Text(errorTitle), message: Text(errorMessage), dismissButton: .default(Text("OK")))
            }
        }
    }
    func letNewWord() {
        let answer = newWord.lowercased().trimmingCharacters(in: .whitespacesAndNewlines)
        //of our answer symbol count is greater than 0(we havent empty string)
        guard answer.count > 0 else {
            return
        }
        guard isOriginal(word: answer) else {
            wordError(title: "Word used already", message: "Be more original")
            return
        }

        guard isPossible(word: answer) else {
            wordError(title: "Word not recognized", message: "You can't just make them up, you know!")
            return
        }

        guard isReal(word: answer) else {
            wordError(title: "Word not possible", message: "That isn't a real word.")
            return
        }
        //append at the top of the list
        listOfWords.insert(answer, at: 0)
        listOfWords.sort()
        for _ in answer{
            gameScore+=1
        }
        //append at the bottom of the list
        //listOfWords.append(answer)
    }
    func startScramble() {
        if let startScrambleURL = Bundle.main.url(forResource: "start", withExtension: "txt"){
        if let startScrambleWordList = try? String(contentsOf: startScrambleURL){
            let allWords = startScrambleWordList.components(separatedBy: "\n")
            rootWord = allWords.randomElement() ?? "undefined"
        
            return
        }
        }
        fatalError("probably error occure by problem with reading start.txt file with words")
    }
    func isOriginal(word: String) -> Bool{
        !listOfWords.contains(word)
    }
    func isPossible(word: String) -> Bool{
        var copiedWord = rootWord
        
        for letter in word{
            if let pos = copiedWord.firstIndex(of: letter){
                copiedWord.remove(at: pos)
            } else {
                return false
            }
        }
        
        return true
    }
    func isReal(word: String) -> Bool {
        let checker = UITextChecker()
        let range = NSRange(location: 0, length: word.utf16.count)
        let misspelledRange = checker.rangeOfMisspelledWord(in: word, range: range, startingAt: 0, wrap: false, language: "en")
        if word.count < 3 {
            return false
        }
        if word == rootWord {
            return false
        }

        return misspelledRange.location == NSNotFound
    }
    func wordError(title: String, message: String) {
        errorTitle = title
        errorMessage = message
        showingError = true
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
